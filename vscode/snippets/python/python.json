{
	"Angr boilerplate code": {
		"prefix": "import angr",
		"body": [
			"import angr",
			"import logging",
			"import claripy",
			"import simuvex",
			"from IPython import embed",
			"",
			"",
			"class custom_hook(simuvex.SimProcedure):",
			"    def run(self, args):",
			"        return 0",
			"",
			"",
			"def add_alphanum_constraint(state, c):",
			"    # set some constraints on the char, let it",
			"    # be a null char or alphanumeric",
			"    is_num = state.solver.And(c >= ord(\"0\"), c <= ord(\"9\"))",
			"    is_alpha_lower = state.solver.And(c >= ord(\"a\"), c <= ord(\"z\"))",
			"    is_alpha_upper = state.solver.And(c >= ord(\"A\"), c <= ord(\"Z\"))",
			"    is_zero = (c == ord('\\x00'))",
			"    isalphanum = state.solver.Or(",
			"        is_num, is_alpha_lower, is_alpha_upper, is_zero)",
			"    state.add_constraints(isalphanum)",
			"    return",
			"",
			"",
			"def start_angr():",
			"    filename = """,
			"    start = 0x0",
			"    find = (0x0)",
			"    avoid = (0x0)",
			"    hook_addr = 0x0",
			"",
			"    ui = claripy.BVS(\"flag\", 8 * 13, explicit_name=True)",
			"    ui_addr = 0x0",
			"",
			"    p = angr.Project(filename, load_options={'auto_load_libs': False})",
			"",
			"    p.hook(hook_addr, custom_hook)",
			"",
			"    state = p.factory.blank_state(",
			"        addr=start, add_options=simuvex.o.unicorn, remove_options={simuvex.o.LAZY_SOLVES})",
			"",
			"    for b in ui.chop(8):",
			"        add_alphanum_constraint(state, b)",
			"    state.memory.store(ui_addr, ui)",
			"",
			"    sg = p.factory.simgr(state)",
			"    sg.explore(find=find, avoid=avoid)",
			"    if sg.found:",
			"        print(sg.found[0].se.eval(ui, cast_to=str))",
			"    return",
			"",
			"",
			"def main():",
			"    start_angr()",
			"",
			"",
			"if __name__ == '__main__':",
			"    logging.getLogger('angr.path_group').setLevel(logging.DEBUG)",
			"    main()",
					
		],
		"description": "Create an angr dummy script"
	}
}